LAB 5 REPORT
Nick Aiello

	The sudoku program allows a user to load a Sudoku puzzle from a text file and fill in the missing spaces to complete it.  Commands are entered as 3 digits separated by spaces, row, column and the desired value respectively.  The input from the user is checked to ensure that there is no duplicate value in the same row, column or 3x3 box; if a duplicate is found, the user input is discarded.  To clear a square, the user enters a 0 as the desired value.  To quit the program, the user can either complete the puzzle or enter -1 at the prompt.
	Internally, the sudoku program is based on the Puzzle class, which is templated to allow easy generalization of the puzzle format to any data type, though the sudoku program uses ints by default.  The Puzzle class serves as a wrapper for a 2 dimensional vector (vector<vector<T> >), which stores the actual data from the game board.  The class also contains overloaded stream operators (<< and >>) to allow the puzzles to be easily loaded from text files or written to the standard output.  The set method serves both to validate input to the board (e.g. duplicate checking) and as a way to publicly access the game board.  The complete method checks to see if the puzzle has been completed by checking all of the squares for a non-default value (non-zero in the sudoku program).  Since input is validated at every step of the process of solving the puzzle (by the set method), it is assumed that if every square has a value, then the puzzle is complete and no further checking for duplicates is necessary.  The Puzzle class also contains private helper methods called rowContains, colContains and boxContains.  These functions are used by the set method in checking for duplicates.
	The output of this program was validated by opening and working with several sudoku files, including the one provided on the lab document.
	Templating is a very powerful aspect of C++, and it is very helpful in cases where functionality needs to be implemented over a wide range of data types.  However, for this lab, I feel like it was overall more of a burden than a benefit.  Sudoku puzzles by nature only work with a few data types, and while variants like Wordoku exist, I think that it would be more efficient to simply implement the Sudoku puzzle as a board of chars.  Since chars can be treated as either alphanumeric characters or simple numbers, this would already allow for both variants of the game.  This would eliminate the extra compiler overhead of templating, as well as make several of the algorithms used more efficient.  For instance, the complete() algorithm could've been made more efficient by (in the case that the puzzle was restricted to the numbers 1-9), checking to see if each row, column and 3x3 box summed to 45 (1+2+3+4+5+6+7+8+9 = 45).  This method is very efficient (O(n)), but only works with numeric data types.  Since we were templating for ANY data type in the lab, the method for checking a completed board had to be replaced with a less efficient algorithm (O(n^2)) that simply loops through all the individual boxes of the board.
	The GitHub repository created as part 1 of this lab can be accessed at https://github.com/naiello/sudoku-solver
